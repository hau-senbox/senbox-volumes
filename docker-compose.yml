services:
  consul:
    image: hashicorp/consul:latest
    restart: 'always'
    container_name: consul
    hostname: consul
    # command: "consul agent -server -ui -data-dir /tmp -node=server-1 -bootstrap-expect=1 -client=0.0.0.0"
    environment:
      CONSUL_BIND_INTERFACE: eth0
      CONSUL_LOCAL_CONFIG: |
        {
          "client_addr": "0.0.0.0",
          "recursors": [
            "8.8.8.8",
            "8.8.4.4"
          ],
          "dns_config": {
            "recursor_strategy": "random"
          },
          "ports": {
            "dns": 53
          },
          "server": true,
          "bootstrap_expect": 1,
          "ui_config": {
            "enabled": true
          },
          "connect": {
            "enabled": true
          },
          "datacenter": "dc1"
        }
    networks:
      vpcbr:
        ipv4_address: 192.0.2.4
    ports:
      - "8500:8500"  # Web UI for Consul
      - "8600:53/udp"
      - "8600:53/tcp"
  
  krakend:
    image: devopsfaith/krakend:2.9
    container_name: krakend
    command: run -dc /etc/krakend/krakend.tmpl
    volumes:
      - ./krakend_config:/etc/krakend/
    dns: 192.0.2.4
    ports:
      - "8080:8080"
    environment:
      - FC_ENABLE=1  # Enable flexible configuration
      - FC_SETTINGS=/etc/krakend/config/settings/  # Correct path to settings
      - FC_PARTIALS=/etc/krakend/config/partials/  # Path for partials
      - FC_TEMPLATES=/etc/krakend/config/templates/  # Path for templates
      - FC_OUT=/etc/krakend/output.json  # Optional: Output the final configuration for debugging
    networks:
      - vpcbr
    depends_on:
      - consul

  go-main-service-db:
    image: mariadb:latest
    container_name: go-main-service-db
    environment:
      MYSQL_ROOT_PASSWORD: my-secret-pw
      MYSQL_DATABASE: sen_master_db
      MYSQL_USER: sen_master
      MYSQL_PASSWORD: 6Yw4rmmaDUkpZtdm
    volumes:
      - ./data/db/go-main-service:/var/lib/mysql # persistent database storage
      - ./db_dumb/go-main-service:/docker-entrypoint-initdb.d # scripts to initialize DB
    networks:
      - vpcbr
    ports:
      - "3308:3306"

  go-main-service:
    build: 
      context: ../senbox-api/src
      dockerfile: Dockerfile
    container_name: go-main-service
    volumes:
      - ./go-main-service-config:/root/config
    networks:
      vpcbr:
        ipv4_address: 192.0.2.5
    ports:
      - "8001"
    depends_on:
      go-main-service-db:
        condition: service_started
    restart: unless-stopped
  
  # inventory-service:
  #   build: 
  #     context: ../senbox-inventory
  #     dockerfile: Dockerfile
  #   container_name: inventory-service
  #   environment:
  #     - JAVA_HOME=/jre
  #     # - TZ=UTC          # Set timezone if needed
  #     - SPRING_CLOUD_CONSUL_HOST=consul
  #     - SPRING_CLOUD_CONSUL_PORT=8500
  #     - SPRING_CLOUD_CONSUL_DISCOVERY_HOSTNAME=192.0.2.6
  #   volumes:
  #     - ./logs:/app/logs
  #   networks:
  #     vpcbr:
  #       ipv4_address: 192.0.2.6
  #   ports:
  #     - "8002"
  #   depends_on:
  #     consul:
  #       condition: service_started
  #   restart: unless-stopped  # Restart the container unless it is explicitly stopped

networks:
  vpcbr:
    driver: bridge
    ipam:
      config:
      - subnet: 192.0.2.0/24

services:
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ./data/db/redis/data:/data
    command:
      [
        "redis-server",
        "--requirepass",
        "senbox",
        "--appendonly",
        "yes",
        "--bind",
        "0.0.0.0",
      ]
    restart: unless-stopped
    networks:
      vpcbr:
        ipv4_address: 192.0.2.71

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight
    ports:
      - "5540:5540"
    restart: unless-stopped
    networks:
      vpcbr:
        ipv4_address: 192.0.2.72

  consul:
    image: hashicorp/consul:latest
    container_name: consul
    hostname: consul
    # command: "consul agent -server -ui -data-dir /tmp -node=server-1 -bootstrap-expect=1 -client=0.0.0.0"
    environment:
      CONSUL_BIND_INTERFACE: eth0
      CONSUL_LOCAL_CONFIG: |
        {
          "client_addr": "0.0.0.0",
          "recursors": [
            "8.8.8.8",
            "8.8.4.4"
          ],
          "dns_config": {
            "recursor_strategy": "random"
          },
          "ports": {
            "dns": 53
          },
          "server": true,
          "bootstrap_expect": 1,
          "ui_config": {
            "enabled": true
          },
          "connect": {
            "enabled": true
          },
          "datacenter": "dc1"
        }
    networks:
      vpcbr:
        ipv4_address: 192.0.2.4
    ports:
      - "8500:8500" # Web UI for Consul
      - "8600:53/udp"
      - "8600:53/tcp"
    restart: unless-stopped

  krakend:
    image: krakend:latest
    container_name: krakend
    command: run -dc /etc/krakend/krakend.tmpl
    volumes:
      - ./krakend_config:/etc/krakend/
    dns: 192.0.2.4
    ports:
      - "8080:8080"
    environment:
      - FC_ENABLE=1 # Enable flexible configuration
      - FC_SETTINGS=/etc/krakend/config/settings/ # Correct path to settings
      - FC_PARTIALS=/etc/krakend/config/partials/ # Path for partials
      - FC_TEMPLATES=/etc/krakend/config/templates/ # Path for templates
      - FC_OUT=/etc/krakend/output.json # Optional: Output the final configuration for debugging
    networks:
      - vpcbr
    depends_on:
      - consul
    restart: unless-stopped

  mongo-main:
    image: mongo:latest
    container_name: mongo-main
    hostname: mongo-main
    volumes:
      - ./data/db/mongo_db/data:/data/db
    networks:
      vpcbr:
        ipv4_address: 192.0.2.10
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    ports:
      - "27017:27017"
    restart: unless-stopped

  inventory_db:
    image: mongo:latest
    container_name: inventory_db
    hostname: inventory_db
    volumes:
      - ./data/db/inventory_db/data:/data/db
    networks:
      vpcbr:
        ipv4_address: 192.0.2.21
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    ports:
      - "27028:27017"
    restart: unless-stopped

  # services_db:
  #   image: mongo:latest
  #   container_name: services_db
  #   hostname: services_db
  #   volumes:
  #     - ./data/db/services_db/data:/data/db
  #   networks:
  #     vpcbr:
  #       ipv4_address: 192.0.2.27
  #   ports:
  #     - "27034:27017"
  #   restart: unless-stopped
  go-main-service-db:
    image: mariadb:latest
    container_name: go-main-service-db
    environment:
      MYSQL_ROOT_PASSWORD: my-secret-pw
      MYSQL_DATABASE: sen_master_db
      MYSQL_USER: sen_master
      MYSQL_PASSWORD: 6Yw4rmmaDUkpZtdm
    volumes:
      - ./data/db/go-main-service:/var/lib/mysql # persistent database storage
      - ./db_dumb/go-main-service:/docker-entrypoint-initdb.d # scripts to initialize DB
    networks:
      vpcbr:
        ipv4_address: 192.0.2.29
    ports:
      - "3308:3306"
    restart: unless-stopped

  go-main-service:
    build:
      context: ../senbox-api/src
      dockerfile: Dockerfile
    container_name: go-main-service
    volumes:
      - ./config/go-main-service.yaml:/root/config/config.yaml
    networks:
      vpcbr:
        ipv4_address: 192.0.2.50
    ports:
      - "8001:8001"
    depends_on:
      - consul
      - go-main-service-db
      # - kafka-1
      # - kafka-2
      # - kafka-3
    restart: unless-stopped

  product-service:
    build:
      context: ../product-service
      dockerfile: Dockerfile
    container_name: product-service
    env_file:
      - ./config/product-service.env
    # volumes:
    #   - ./config/product-service.yaml:/root/.bin/config.dev.yaml
    networks:
      vpcbr:
        ipv4_address: 192.0.2.52
    ports:
      - "8003:8003"
    depends_on:
      - consul
      - mongo-main
      # - kafka-1
      # - kafka-2
      # - kafka-3
    restart: unless-stopped

  cart-service:
    build:
      context: ../cart-service
      dockerfile: Dockerfile
    container_name: cart-service
    env_file:
      - ./config/cart-service.env
    # volumes:
    #   - ./config/cart-service.env:/root/.env
    networks:
      vpcbr:
        ipv4_address: 192.0.2.53
    ports:
      - "8004:8004"
    depends_on:
      - consul
      - mongo-main
      # - kafka-1
      # - kafka-2
      # - kafka-3
    restart: unless-stopped

  order-service:
    build:
      context: ../order-service
      dockerfile: Dockerfile
    container_name: order-service
    env_file:
      - ./config/order-service.env
    # volumes:
    #   - ./config/order-service.env:/root/.env
    networks:
      vpcbr:
        ipv4_address: 192.0.2.54
    ports:
      - "8005:8005"
    depends_on:
      - consul
      - mongo-main
      # - kafka-1
      # - kafka-2
      # - kafka-3
    restart: unless-stopped

  portal-service:
    build:
      context: ../portal-service
      dockerfile: Dockerfile
    container_name: portal-service
    env_file:
      - ./config/portal-service.env
    # volumes:
    #   - ./config/portal-service.env:/root/.env
    networks:
      vpcbr:
        ipv4_address: 192.0.2.55
    ports:
      - "8006:8006"
    depends_on:
      - consul
      - mongo-main
      # - kafka-1
      # - kafka-2
      # - kafka-3
    restart: unless-stopped

  chat-service:
    build:
      context: ../chat-service
      dockerfile: Dockerfile
    container_name: chat-service
    env_file:
      - ./config/chat-service.env
    # volumes:
    #   - ./config/chat-service.env:/root/.env
    networks:
      vpcbr:
        ipv4_address: 192.0.2.56
    ports:
      - "8007:8007"
    depends_on:
      - consul
      - mongo-main
      # - kafka-1
      # - kafka-2
      # - kafka-3
    restart: unless-stopped

  holiday-service:
    build:
      context: ../holiday-service
      dockerfile: Dockerfile
    container_name: holiday-service
    env_file:
      - ./config/holiday-service.env
    # volumes:
    #   - ./config/holiday-service.env:/root/.env
    networks:
      vpcbr:
        ipv4_address: 192.0.2.57
    ports:
      - "8008:8008"
    depends_on:
      - consul
      - mongo-main
      # - kafka-1
      # - kafka-2
      # - kafka-3
    restart: unless-stopped

  term-service:
    build:
      context: ../term-service
      dockerfile: Dockerfile
    container_name: term-service
    volumes:
      - ./config/term-service.yaml:/configs/config.yaml
    networks:
      vpcbr:
        ipv4_address: 192.0.2.58
    ports:
      - "8009:8009"
    depends_on:
      - consul
      - mongo-main
      # - kafka-1
      # - kafka-2
      # - kafka-3

  wallet-service:
    build:
      context: ../wallet-service
      dockerfile: Dockerfile
    container_name: wallet-service
    env_file:
      - ./config/wallet-service.env
    networks:
      vpcbr:
        ipv4_address: 192.0.2.59
    ports:
      - "8010:8010"
    depends_on:
      - consul
      - mongo-main
      # - kafka-1
      # - kafka-2
      # - kafka-3
    restart: unless-stopped

  media-service:
    build:
      context: ../media-service
      dockerfile: Dockerfile
    container_name: media-service
    volumes:
      - ./config/media-service.yaml:/configs/config.yaml
    networks:
      vpcbr:
        ipv4_address: 192.0.2.60
    ports:
      - "8011:8011"
    depends_on:
      - consul
      - mongo-main
      # - kafka-1
      # - kafka-2
      # - kafka-3

  classroom-service:
    build:
      context: ../classroom-service
      dockerfile: Dockerfile
    container_name: classroom-service
    env_file:
      - ./config/classroom-service.env
    networks:
      vpcbr:
        ipv4_address: 192.0.2.61
    ports:
      - "8012:8012"
    depends_on:
      - consul
      - mongo-main
      # - kafka-1
      # - kafka-2
      # - kafka-3
    restart: unless-stopped

  inventory-service:
    build:
      context: ../inventory-service
      dockerfile: Dockerfile
    container_name: inventory-service
    env_file:
      - ./config/inventory-service.env
    networks:
      vpcbr:
        ipv4_address: 192.0.2.63
    ports:
      - "8014:8014"
    depends_on:
      - consul
      - inventory_db
      # - kafka-1
      # - kafka-2
      # - kafka-3

  event-service:
    build:
      context: ../event-service
      dockerfile: Dockerfile
    container_name: event-service
    env_file:
      - ./config/event-service.env
    networks:
      vpcbr:
        ipv4_address: 192.0.2.64
    ports:
      - "8015:8015"
    depends_on:
      - consul
      - mongo-main
      # - kafka-1
      # - kafka-2
      # - kafka-3

  todo-service:
    build:
      context: ../todo-service
      dockerfile: Dockerfile
    container_name: todo-service
    env_file:
      - ./config/todo-service.env
    networks:
      vpcbr:
        ipv4_address: 192.0.2.65
    ports:
      - "8016:8016"
    depends_on:
      - consul
      - mongo-main
      # - kafka-1
      # - kafka-2
      # - kafka-3

  colortime-service:
    build:
      context: ../colortime-service
      dockerfile: Dockerfile
    container_name: colortime-service
    env_file:
      - ./config/colortime-service.env
    networks:
      vpcbr:
        ipv4_address: 192.0.2.66
    ports:
      - "8017:8017"
    depends_on:
      - consul
      - mongo-main
      # - kafka-1
      # - kafka-2
      # - kafka-3

  # # kafka kraft cluster
  # kafka-1:
  #   image: "bitnami/kafka:latest"
  #   container_name: kafka-1
  #   hostname: kafka-1
  #   environment:
  #     - ALLOW_ANONYMOUS_LOGIN=yes
  #     - KAFKA_ENABLE_KRAFT=yes
  #     - KAFKA_CFG_PROCESS_ROLES=broker,controller
  #     - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
  #     - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=kraft:PLAINTEXT,CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT
  #     - KAFKA_BROKER_ID=1
  #     - KAFKA_CFG_NODE_ID=1
  #     - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9094,2@kafka-2:9094,3@kafka-3:9094
  #     - ALLOW_PLAINTEXT_LISTENER=yes
  #     - BITNAMI_DEBUG=yes
  #     - KAFKA_KRAFT_CLUSTER_ID=OTMwNzFhYTY1ODNiNGE5OT
  #     - KAFKA_CFG_KRAFT_REPLICATION_FACTOR=3
  #     - KAFKA_CFG_ADVERTISED_LISTENERS=kraft://kafka-1:9093,INTERNAL://kafka-1:9092
  #     - KAFKA_CFG_LISTENERS=kraft://0.0.0.0:9093,CONTROLLER://kafka-1:9094,INTERNAL://0.0.0.0:9092
  #     - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
  #     - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=3
  #     - KAFKA_CFG_MIN_INSYNC_REPLICAS=2
  #   ports:
  #     - "9101:9092"
  #     - "9102:9093"
  #     - "9103:9094"
  #   networks:
  #     vpcbr:
  #       ipv4_address: 192.0.2.5
  #   volumes:
  #     - ./data/kafka/kafka-1:/bitnami/kafka/data

  # kafka-2:
  #   image: "bitnami/kafka:latest"
  #   container_name: kafka-2
  #   hostname: kafka-2
  #   environment:
  #     - ALLOW_ANONYMOUS_LOGIN=yes
  #     - KAFKA_ENABLE_KRAFT=yes
  #     - KAFKA_CFG_PROCESS_ROLES=broker,controller
  #     - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
  #     - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=kraft:PLAINTEXT,CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT
  #     - KAFKA_BROKER_ID=2
  #     - KAFKA_CFG_NODE_ID=2
  #     - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9094,2@kafka-2:9094,3@kafka-3:9094
  #     - ALLOW_PLAINTEXT_LISTENER=yes
  #     - BITNAMI_DEBUG=yes
  #     - KAFKA_KRAFT_CLUSTER_ID=OTMwNzFhYTY1ODNiNGE5OT
  #     - KAFKA_CFG_KRAFT_REPLICATION_FACTOR=3
  #     - KAFKA_CFG_ADVERTISED_LISTENERS=kraft://kafka-2:9093,INTERNAL://kafka-2:9092
  #     - KAFKA_CFG_LISTENERS=kraft://0.0.0.0:9093,CONTROLLER://kafka-2:9094,INTERNAL://0.0.0.0:9092
  #     - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
  #     - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=3
  #     - KAFKA_CFG_MIN_INSYNC_REPLICAS=2
  #   ports:
  #     - "9095:9092"
  #     - "9096:9093"
  #     - "9097:9094"
  #   networks:
  #     vpcbr:
  #       ipv4_address: 192.0.2.6
  #   volumes:
  #     - ./data/kafka/kafka-2:/bitnami/kafka/data

  # kafka-3:
  #   image: "bitnami/kafka:latest"
  #   container_name: kafka-3
  #   hostname: kafka-3
  #   environment:
  #     - ALLOW_ANONYMOUS_LOGIN=yes
  #     - KAFKA_ENABLE_KRAFT=yes
  #     - KAFKA_CFG_PROCESS_ROLES=broker,controller
  #     - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
  #     - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=kraft:PLAINTEXT,CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT
  #     - KAFKA_BROKER_ID=3
  #     - KAFKA_CFG_NODE_ID=3
  #     - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9094,2@kafka-2:9094,3@kafka-3:9094
  #     - ALLOW_PLAINTEXT_LISTENER=yes
  #     - BITNAMI_DEBUG=yes
  #     - KAFKA_KRAFT_CLUSTER_ID=OTMwNzFhYTY1ODNiNGE5OT
  #     - KAFKA_CFG_KRAFT_REPLICATION_FACTOR=3
  #     - KAFKA_CFG_ADVERTISED_LISTENERS=kraft://kafka-3:9093,INTERNAL://kafka-3:9092
  #     - KAFKA_CFG_LISTENERS=kraft://0.0.0.0:9093,CONTROLLER://kafka-3:9094,INTERNAL://0.0.0.0:9092
  #     - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
  #     - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=3
  #     - KAFKA_CFG_MIN_INSYNC_REPLICAS=2
  #   ports:
  #     - "9098:9092"
  #     - "9099:9093"
  #     - "9100:9094"
  #   networks:
  #     vpcbr:
  #       ipv4_address: 192.0.2.7
  #   volumes:
  #     - ./data/kafka/kafka-3:/bitnami/kafka/data
  # # end kafka kraft cluster

  # kafka-ui:
  #   image: "provectuslabs/kafka-ui:latest"
  #   container_name: kafka-ui
  #   environment:
  #     # - DYNAMIC_CONFIG_ENABLED=true
  #     - KAFKA_CLUSTERS_0_NAME=local
  #     - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-1:9093,kafka-2:9093,kafka-3:9093  # List of your Kafka brokers
  #   ports:
  #     - "8088:8080"  # Expose the Kafka UI on port 8080
  #   networks:
  #     vpcbr:
  #       ipv4_address: 192.0.2.8
  #   depends_on:
  #     - kafka-1
  #     - kafka-2
  #     - kafka-3

  # redpanda-console:
  #   image: "redpandadata/console:latest"
  #   container_name: redpanda-console
  #   environment:
  #     - KAFKA_BROKERS=kafka-1:9093,kafka-2:9093,kafka-3:9093  # List of your Kafka brokers
  #   ports:
  #     - "8011:8080"  # Expose the Kafka UI on port 8080
  #   networks:
  #     - kafka
  #   depends_on:
  #     - kafka-1
  #     - kafka-2
  #     - kafka-3

  # schema-registry:
  #   image: "confluentinc/cp-schema-registry:latest"
  #   container_name: schema-registry
  #   environment:
  #     - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=kafka-1:9093,kafka-2:9093,kafka-3:9093
  #     - SCHEMA_REGISTRY_LISTENER_HTTP_PORT=8081
  #     - SCHEMA_REGISTRY_KAFKASTORE_TOPIC=_schemas
  #     - SCHEMA_REGISTRY_HOST_NAME=schema-registry
  #   ports:
  #     - "8081:8081"  # Expose Schema Registry UI
  #   networks:
  #     - kafka
  #   depends_on:
  #     - kafka-1
  #     - kafka-2
  #     - kafka-3

  # rest-proxy:
  #   image: "confluentinc/cp-kafka-rest:latest"
  #   container_name: kafka-rest-proxy
  #   environment:
  #     - KAFKA_REST_HOST_NAME=kafka-rest-proxy
  #     - KAFKA_REST_LISTENER=http://0.0.0.0:8082
  #     - KAFKA_REST_BOOTSTRAP_SERVERS=kafka-1:9093,kafka-2:9093,kafka-3:9093
  #     - KAFKA_REST_SCHEMA_REGISTRY_URL=http://schema-registry:8081
  #   ports:
  #     - "8082:8082"  # Expose REST Proxy API
  #   networks:
  #     - kafka
  #   depends_on:
  #     - schema-registry
  #     - kafka-1
  #     - kafka-2
  #     - kafka-3

  report-service:
    build:
      context: ../report-service
      dockerfile: Dockerfile
    container_name: report-service
    volumes:
      - ./config/report-service.yaml:/configs/config.yaml
    networks:
      vpcbr:
        ipv4_address: 192.0.2.67
    ports:
      - "8018:8018"
    depends_on:
      - consul
      - mongo-main
      # - kafka-1
      # - kafka-2
      # - kafka-3

  department-service:
    build:
      context: ../department-service
      dockerfile: Dockerfile
    container_name: department-service
    volumes:
      - ./config/department-service.yaml:/configs/config.yaml
    networks:
      vpcbr:
        ipv4_address: 192.0.2.68
    ports:
      - "8019:8019"
    depends_on:
      - consul
      - mongo-main
      # - kafka-1
      # - kafka-2
      # - kafka-3

  # services-service:
  #   build:
  #     context: ../services-management
  #     dockerfile: Dockerfile
  #   container_name: services-service
  #   volumes:
  #     - ./config/services-management.yaml:/configs/config.yaml
  #   networks:
  #     vpcbr:
  #       ipv4_address: 192.0.2.69
  #   ports:
  #     - "8020:8020"
  #   depends_on:
  #     - consul
  #     - services_db
  #     # - kafka-1
  #     # - kafka-2
  #     # - kafka-3

  food-service:
    build:
      context: ../food-service
      dockerfile: Dockerfile
    container_name: food-service
    env_file:
      - ./config/food-service.env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=senbox
    networks:
      vpcbr:
        ipv4_address: 192.0.2.70
    ports:
      - "8021:8021"
    depends_on:
      - consul
      - mongo-main
      - redis
      # - kafka-1
      # - kafka-2
      # - kafka-3

networks:
  vpcbr:
    driver: bridge
    ipam:
      config:
        - subnet: 192.0.2.0/24
# sudo apib -c 1000000 -d 60 http://localhost:8080/user/
# h2load -n100000 -c100 -m10 http://localhost:8080/user/
# autocannon -c 1000 -p 100 -d 60 http://localhost:8080/v1/user/all?role=all
